{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CS 6332 Home Welcome to CS 6332: Systems Security and Binary (Malicious) Code Analysis. News 08/19/2019: Course site open. Welcome! Page last revised on: 2019-08-27","title":"CS 6332 Home"},{"location":"#cs-6332-home","text":"Welcome to CS 6332: Systems Security and Binary (Malicious) Code Analysis.","title":"CS 6332 Home"},{"location":"#news","text":"08/19/2019: Course site open. Welcome! Page last revised on: 2019-08-27","title":"News"},{"location":"assignments/","text":"Assignments Assignment 1 Assignment 2 Page last revised on: 2019-08-27","title":"Assignments"},{"location":"assignments/#assignments","text":"","title":"Assignments"},{"location":"assignments/#assignment-1","text":"","title":"Assignment 1"},{"location":"assignments/#assignment-2","text":"Page last revised on: 2019-08-27","title":"Assignment 2"},{"location":"general/","text":"Course Information Instructor Instructor: Kangkook Jee ( firstname . lastname @utdallas.edu) Office ECSS 3.226 Office hour: 3:00 ~ 4:30 PM Friday Course links Course website: http://www.syssec.org/cs6332-F19/ Coursebook: https://coursebook.utdallas.edu/search/cs6332.001.19f eLearning: Class meetings When: F 15:05-17:45 (3:05pm-5:45pm) Where: ECSN 2.120 Course Description CS 6332 is a graduate-level, research-oriented, systems, and software, security class. The course mainly focus on security issues on system and software programs. Therefore the course will cover The basics concepts regarding the system and program, Attacker tactics and techniques to take over software systems, Countering security measures to monitor, analyze, and mitigate variety sets of security security issues. Learning expectations Through this course, students will learn Basics of computer system and software systems with special stress on initialization and its subsequent program executions. Students will learn the variety of attacker tactics and techniques evolve over time to exploit security holes along with counterpart defense mechanisms. Different reverse engineering techniques to monitor, analyze, and mitigate (both benign and malicious) program activities which would include secure system design principles; dynamic and static analysis approaches for different program representation \u2013 source code, binary, compiler IR, and byte-codes; VMM (hypervisor) techniques to instrument runtime process. Course pre-requisites CS 3340: Computer Architecture ; CS 3377: C Programming in a UNIX Environment ; CS 4348 - Operating Systems Concepts Recommended courses CS 6301: Language-based Security ; CS 4393: Computer and Network Security ; CS 6349.001: Network Security Suggested Texts, Readings, & Materials The course has no textbook, but assigned readings from different sources (refer to course schedule). The followings are recommended readings for the class. [AOE] Erickson, Jon. \u201cHacking: The Art of Exploitation\u201d, 2nd Edition. [SRE] Eldad Eilam. \u201cReversing: Secrets of Reverse Engineering\u201d. [CSAPP] Randal E. Bryant and David R. O\u2019Hallaron. \u201cComputer Systems: A Programmer\u2019s Perspective\u201d 2nd Edition. [TSH] Kozoil, Jack. \u201cThe Shellcoder\u2019s Handbook: Discovering and Exploiting Security Holes\u201d. [PPA] Principles in Program Analysis. Springer. TAs TA: [TBD] Email: cs6332staff@utdallas.edu Online discussion Online discussion is strongly encouraged and it will help you a lot in solving lab problems. Please join Piazza and post your questions, ideas and thoughts. Page last revised on: 2019-08-27","title":"General"},{"location":"general/#course-information","text":"","title":"Course Information"},{"location":"general/#instructor","text":"Instructor: Kangkook Jee ( firstname . lastname @utdallas.edu) Office ECSS 3.226 Office hour: 3:00 ~ 4:30 PM Friday","title":"Instructor"},{"location":"general/#course-links","text":"Course website: http://www.syssec.org/cs6332-F19/ Coursebook: https://coursebook.utdallas.edu/search/cs6332.001.19f eLearning:","title":"Course links"},{"location":"general/#class-meetings","text":"When: F 15:05-17:45 (3:05pm-5:45pm) Where: ECSN 2.120","title":"Class meetings"},{"location":"general/#course-description","text":"CS 6332 is a graduate-level, research-oriented, systems, and software, security class. The course mainly focus on security issues on system and software programs. Therefore the course will cover The basics concepts regarding the system and program, Attacker tactics and techniques to take over software systems, Countering security measures to monitor, analyze, and mitigate variety sets of security security issues.","title":"Course Description"},{"location":"general/#learning-expectations","text":"Through this course, students will learn Basics of computer system and software systems with special stress on initialization and its subsequent program executions. Students will learn the variety of attacker tactics and techniques evolve over time to exploit security holes along with counterpart defense mechanisms. Different reverse engineering techniques to monitor, analyze, and mitigate (both benign and malicious) program activities which would include secure system design principles; dynamic and static analysis approaches for different program representation \u2013 source code, binary, compiler IR, and byte-codes; VMM (hypervisor) techniques to instrument runtime process.","title":"Learning expectations"},{"location":"general/#course-pre-requisites","text":"CS 3340: Computer Architecture ; CS 3377: C Programming in a UNIX Environment ; CS 4348 - Operating Systems Concepts","title":"Course pre-requisites"},{"location":"general/#recommended-courses","text":"CS 6301: Language-based Security ; CS 4393: Computer and Network Security ; CS 6349.001: Network Security","title":"Recommended courses"},{"location":"general/#suggested-texts-readings-materials","text":"The course has no textbook, but assigned readings from different sources (refer to course schedule). The followings are recommended readings for the class. [AOE] Erickson, Jon. \u201cHacking: The Art of Exploitation\u201d, 2nd Edition. [SRE] Eldad Eilam. \u201cReversing: Secrets of Reverse Engineering\u201d. [CSAPP] Randal E. Bryant and David R. O\u2019Hallaron. \u201cComputer Systems: A Programmer\u2019s Perspective\u201d 2nd Edition. [TSH] Kozoil, Jack. \u201cThe Shellcoder\u2019s Handbook: Discovering and Exploiting Security Holes\u201d. [PPA] Principles in Program Analysis. Springer.","title":"Suggested Texts, Readings, &amp; Materials"},{"location":"general/#tas","text":"TA: [TBD] Email: cs6332staff@utdallas.edu","title":"TAs"},{"location":"general/#online-discussion","text":"Online discussion is strongly encouraged and it will help you a lot in solving lab problems. Please join Piazza and post your questions, ideas and thoughts. Page last revised on: 2019-08-27","title":"Online discussion"},{"location":"inc/","text":"test.include","title":"test.include"},{"location":"inc/#testinclude","text":"","title":"test.include"},{"location":"papers/","text":"Reading list Note How to read academic papers Particularly for systems security papers: (1) Read Abstract -> Introduction -> Conclusion (2) Find and read a motivation (representative) example or case studies. They include a complete (and often realistic) story and how the proposed idea solves the problem with newly proposed methods. Smashing the Stack for Fun and Profit On the effectiveness of Address-Space Randomization Dynamic/Static Analysis Frameworks Pin: building customized program analysis tools with dynamic instrumentation [PLDI\u201805] Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation [PLDI\u201807] LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation [CGO\u201804] Data-flow tracking and Data-flow analysis * libdft: Practical Dynamic Data Flow Tracking for Commodity Systems [VEE'12] * A General Approach for Efficiently Accelerating Software-based Dynamic Data Flow Tracking on Commodity Hardware [NDSS'12] * LDX: Causality Inference by Lightweight Dual Execution [ASPLOS'16] Control-flow tracking and Control-flow analysis Control-Flow Integrity [MSR-TR-05-18] Efficient Path Encoding [MICRO\u201896] Precise Calling Context Encoding [ICSE\u201810] LDX: Causality Inference by Lightweight Dual Execution [ASPLOS\u201816] Evasive techniques Evading android runtime analysis via sandbox detection [ASIACCS\u201814] Detecting Malware and Sandbox Evasion Techniques [SANS InfoSec Reading Room] News Article X-Force: Force-Executing Binary Programs for Security Applications [USENIX\u201814] Revolver: An Automated Approach to the Detection of Evasive Web-based Malware [SP\u201813] Code obfuscation/de-obfuscation Deobfuscation of virtualization-obfuscated software: a semantics-based approach [CCS\u201811] LOOP: Logic-Oriented Opaque Predicate Detection in Obfuscated Binary Code [CCS\u201815] Code obfuscation against symbolic execution attacks [ACSAC\u201816] Record and replay / N-version systems Intrusion recovery using selective re-execution [OSDI\u201810] Record and transplay: partial checkpointing for replay debugging across heterogeneous systems [SIGMETRICS\u201811] Transparent Mutable Replay for Multicore Debugging and Patch Validation [ASPLOS\u201813] Varan the Unbelievable: An Efficient N-version Execution Framework [ASPLOS\u201815] Audit-logging High Accuracy Attack Provenance via Binary-Based Execution Partition [NDSS\u201813] LogGC: Garbage Collecting Audit Log [CCS\u201813] Efficient patch-based auditing for web application vulnerabilities [OSDI\u201812] Web/Browser Security The Security Architecture of the Chromium Browser UCognito: Private Browsing without Tears [CCS\u201815] WebCapsule: Towards a Lightweight Forensic Engine For Web Browsers [CCS\u201815] Riding out DOMsday: Toward Detecting and Preventing DOM Cross-Site Scripting [NDSS\u201818] FlashDetect: ActionScript 3 malware detection [RAID\u201812] The Postman Always Rings Twice: Attacking and Defending postMessage in HTML5 Websites [NDSS\u201813] Sandboxing/isolation, Fault localization Native Client: A Sandbox for Portable, Untrusted x86 Native Code [SP\u201809] Mobile/IoT Security iRiS: Vetting Private API Abuse in iOS Applications [CCS\u201815] GUITAR: Piecing Together Android App GUIs from Memory Images. [CCS\u201815] Fear and Logging in the Internet of Things [NDSS\u201818] IoTFuzzer: Discovering Memory Corruptions in IoT Through App-based Fuzzing [NDSS\u201818] Sensitive Information Tracking in Commodity IoT [USENIX\u201818] Machine Learning (Added) Learning from Mutants: Using Code Mutation to Learn and Monitor Invariants of a Cyber-Physical System DeepXplore: Automated Whitebox Testing of Deep Learning Systems Towards Deep Learning Models Resistant to Adversarial Attacks Page last revised on: 2019-08-30","title":"Papers"},{"location":"papers/#reading-list","text":"Note How to read academic papers Particularly for systems security papers: (1) Read Abstract -> Introduction -> Conclusion (2) Find and read a motivation (representative) example or case studies. They include a complete (and often realistic) story and how the proposed idea solves the problem with newly proposed methods. Smashing the Stack for Fun and Profit On the effectiveness of Address-Space Randomization","title":"Reading list"},{"location":"papers/#dynamicstatic-analysis-frameworks","text":"Pin: building customized program analysis tools with dynamic instrumentation [PLDI\u201805] Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation [PLDI\u201807] LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation [CGO\u201804]","title":"Dynamic/Static Analysis Frameworks"},{"location":"papers/#data-flow-tracking-and-data-flow-analysis","text":"* libdft: Practical Dynamic Data Flow Tracking for Commodity Systems [VEE'12] * A General Approach for Efficiently Accelerating Software-based Dynamic Data Flow Tracking on Commodity Hardware [NDSS'12] * LDX: Causality Inference by Lightweight Dual Execution [ASPLOS'16] Control-flow tracking and Control-flow analysis Control-Flow Integrity [MSR-TR-05-18] Efficient Path Encoding [MICRO\u201896] Precise Calling Context Encoding [ICSE\u201810] LDX: Causality Inference by Lightweight Dual Execution [ASPLOS\u201816] Evasive techniques Evading android runtime analysis via sandbox detection [ASIACCS\u201814] Detecting Malware and Sandbox Evasion Techniques [SANS InfoSec Reading Room] News Article X-Force: Force-Executing Binary Programs for Security Applications [USENIX\u201814] Revolver: An Automated Approach to the Detection of Evasive Web-based Malware [SP\u201813] Code obfuscation/de-obfuscation Deobfuscation of virtualization-obfuscated software: a semantics-based approach [CCS\u201811] LOOP: Logic-Oriented Opaque Predicate Detection in Obfuscated Binary Code [CCS\u201815] Code obfuscation against symbolic execution attacks [ACSAC\u201816] Record and replay / N-version systems Intrusion recovery using selective re-execution [OSDI\u201810] Record and transplay: partial checkpointing for replay debugging across heterogeneous systems [SIGMETRICS\u201811] Transparent Mutable Replay for Multicore Debugging and Patch Validation [ASPLOS\u201813] Varan the Unbelievable: An Efficient N-version Execution Framework [ASPLOS\u201815] Audit-logging High Accuracy Attack Provenance via Binary-Based Execution Partition [NDSS\u201813] LogGC: Garbage Collecting Audit Log [CCS\u201813] Efficient patch-based auditing for web application vulnerabilities [OSDI\u201812] Web/Browser Security The Security Architecture of the Chromium Browser UCognito: Private Browsing without Tears [CCS\u201815] WebCapsule: Towards a Lightweight Forensic Engine For Web Browsers [CCS\u201815] Riding out DOMsday: Toward Detecting and Preventing DOM Cross-Site Scripting [NDSS\u201818] FlashDetect: ActionScript 3 malware detection [RAID\u201812] The Postman Always Rings Twice: Attacking and Defending postMessage in HTML5 Websites [NDSS\u201813] Sandboxing/isolation, Fault localization Native Client: A Sandbox for Portable, Untrusted x86 Native Code [SP\u201809] Mobile/IoT Security iRiS: Vetting Private API Abuse in iOS Applications [CCS\u201815] GUITAR: Piecing Together Android App GUIs from Memory Images. [CCS\u201815] Fear and Logging in the Internet of Things [NDSS\u201818] IoTFuzzer: Discovering Memory Corruptions in IoT Through App-based Fuzzing [NDSS\u201818] Sensitive Information Tracking in Commodity IoT [USENIX\u201818] Machine Learning (Added) Learning from Mutants: Using Code Mutation to Learn and Monitor Invariants of a Cyber-Physical System DeepXplore: Automated Whitebox Testing of Deep Learning Systems Towards Deep Learning Models Resistant to Adversarial Attacks Page last revised on: 2019-08-30","title":"Data-flow tracking and Data-flow analysis"},{"location":"projdraft/","text":"System call level data collection for behavioral security analysis Motivation In implementing in-host (vs. out-host or network) security measures efficient and reliable source for data collection is an essential building block. While different design choices are available in terms of monitoring granularities, system call level monitoring seems to be reasonable compromise consideration in terms of performance overhead and monitoring accuracy (granularity). Many existing in-host monitoring solutions choose a subset of system calls to capture, monitor and report for security analysis. Can we implement a better data collection for system call tracing? Leveraging the existing system call collection mechanisms (say sysdig, or dtrace, linux audit), how much overhead that we expect? can we collect and This area is in large demand and can spun into a number of different research directions. Project idea 1: System-call level data collection framework for Windows A number of existing implementation exists for Linux systems (Linux Audit, OSX DTrace, Sysdig project), but not many implementation exists for Windows operating systems. The main purpose of the project will be implementing MS Windows version of system call level data collection framework. Students will study and investigate a cadidate data source ETW (Event Tracing for Windows) . Students with previous experience MS Windows system programming may find this project interesting. Project idea 2: A comparision study of different system call data collection frameworks We it is previously mentioned, we have different data collection sources (Linux Audit, Sysdig, DTrace \u2026) that can run on a same system (say Linux). Students can try to build a same data collection framework for leveraging different mechanisms to compare the efficency and capability. Project can start by Data collection implemented/configured to collection the same subset of system calls (e.g., read(), write(), exec(), fork(), send(), recve()) and run those against standardized workload (e.g., benchmark suites and workloads). Project idea 3: User-level support for process-DNS query association Besides system call entries which can be obtained by the above mentioned data sources, we have other interested system events with higher/more security implications worth collected and analyzed. DNS is one of those information, traditionally collected from outside the host, only to associated to the host level without having the finer association with regard to a process which process actually initiated the DNS query of our interestes. A previous of previous proposal exists leveraging kernel level association or system interfaces. These turn out to be too intrusive enforcing users to kernel modules or to be subject to unexpected changes of system implementation. The project will implement the process-DNS association much lighter fashion without loosing/sacrifing the accuracy, but associating and cor-relating network system call (i.e., send(), recv()) and PCAP data. With this project aim to bridge the gap between two different domains of network and system security. Project idea 4: TPM leveraged Integrity and Safety Assurance for Edge Data Collection Agent In implementing host-based security solutions, the guarantee for integrity of data collection agent and trustworthiness of its report have always been a challenging problem. For instance, the security analyst from Security Operation Center (SoC) does not have many options to confirm reports from end-devices (e.g., computers, servers, IoT devices) are indeed genunie (uncompromised). In this project, we want to leverage the hardware encoded security to build a root of trust for end-host security monitoring agents and confirm the authenticity and integrity of its status and messages it is reporting. From the project, students will Investigate and study threat model for end-host security agent. Inverstigate the capability and limitation of generally used TPM devices. Design and propose different level of security design and their trade-offs. Build prototype for TPM leveraged data collection agent Binary Similarity Analysis to Detect Supply Chain Attack Newly updated programs may contain security backdoor. Without source code in hand can we measure the difference and specify the changes made to the code? Students can compare binaries of different versions program analysis representation such Control-Flow Graph (CFG), Function call graph. Such feature may provide an important and useful primitive detecting and mitigating the latest threats such as supply-chain-attacks . Many different ways for such attacks to be implanted to a public and well-trusted sources. The software vendor may implant attack vectors to get capabilities beyond its users expectation pretending it to be as a mere functionality extension. Or the active attacker plays a hat of open source programer and contribute to a widely adopted projects pretending to be a simple functionality extensions. Project steps Literature survey Impelement your own prototype example Choose a not-to-big but interesting open source project Build the source to produce a bianry. Extract program representation against the binary. Inject a threat vector(e.g., simple backdoor) Build the source to produce a bianry. Extract program representation against the binary. Compare two representations to confirm your approach. Apply your approach to real softwares You can test your approach with .... References Towards Automatic Software Lineage Inference Usenix Security 2013 Edge TPU related project Google and Nvidia deployed edge-based computing devices for accelerating machine learning workloads. Nvidia Jetson nano Google Edge TPU processing board The motivation behind the direction is to offload expensive tasks of data transfer to the cloud and processing to on-the-spot edge devices. While this open a new computational model and further facilitates new usage cases with the various applications based on accelerated ML support on-the-fly, at the same time it can also bring new security landscapes eitherproviding new ways of implementing security task or exposing new attack surface for the adversaries can aim to take over. Project idea 1: Security application using Edge-TPU With new device and its new capability, students can be wild and creative to propose a new security application. Note that image and video at the edge devices (similar size of Raspberry Pi board) will have much larger throughout and performed much faster. Project idea 2: Protecting assets from Edge-TPU With new edge device, important intellectual assets such as Prediction Model needs to be offloaded and transferred to each edge devices. For the portablity nature of Edge device, adversary can easily obtain devices phsycally or over the network. For the project, students can think of ways to prevent such assets from being taken over by the adversary. Students needs to consider both runtime and offline aspects. Note that CPU components of the devices by default Trustzone featuress. Improvement for Automated Large-scale Malware Analysis Study Recently, we observe millions of allegedly payloads are found and reported daily and this phenomenon pushes the task of manual investigation and analysis nearly infeasilble. Industry and academia together have proposed and worked on automated framework to scale process and analyze malware payloads by implemented automated security sandbox for security and malware analysis. Yet, such proposal has improved the status, we as a community yet to see many pitfalls and limitation in replaying malware and capture the essence of malicious behavior. From this project, students will perform the following tasks. First implement one of the most well-known opensource sandbox for malware analysis . Write behavioral signature by extending a Cuckoo community API to better judge whethter a given payload is indeed malicous thus require further investigation. Investigate different techniques (Anti-VM, Anti-Debug) that give malware writers employs to probes the sandbox execution to silencing any of malicious behaviors, thus can remain undetected/undiscovered by the analysis. For a given malware payload, extend the sandbox framework by implementing functionalities to spot anti-debugging techinques and find a way to go around it. References Cuckoo Sandbox Cuckoo Community Spotless Sandboxes: Evading Malware Analysis Systems using Wear-and-Tear Artifacts Implementation of Advanced Persitent Threat (APT) framework for Security Evaluation More research and industry together focuses on Advanced Persistent Threat (APT) designed and launched by nation-level threat actors. Different approaches to monitor, analyze, and mitigate such attacks are proposed. However, research and industry together lacks in framework level support for testing and confirm their effectiveness in protecting valuable assets against such attempts. In this project, students will First, perform a literature research APT attacks. Build a mini-lab environment that would emulate a real-world enterprise environment. Implement and document a number of APT cases References APT Notes - Github project: new repo , old repo APT3 scenario by MITRE Steganography or image forensics \u2013 Analysis and defense for malcious payload embedded documentation Steganography has been an effective techinques for the hacker community in embedding different types of malcious payloads into seemingly benign document to evade security detection measures. This provides attacker easy way to propagated their malicious payloads yet remain undetected by any security measure. When you see any databases or public resources for malware collections, you realizes malware-embedded documents now take majority. Analyzing Malicious Documents Cheat Sheet https://www.youtube.com/watch?v=np0mPy-EHII Steganography: A Safe Haven for Malware https://books.google.com/books?hl=en&lr=&id=qMB9AiFUWF0C&oi=fnd&pg=PP1&ots=glBaUv19cd&sig=VrUI34kRvs67Lf7r7EMHNRbBtz0 \u2018Dresden Image Database\u2019 for benchmarking digital image forensics Comparsion of process-level instrumentation approachs virtualization As our course proceeds, we will learn a number of different choices in instrumenting software program to introspect process and system internals at runtime. The one can leverage such frameworks to monitor, analyze, and mitigate process and system activities. Instrumentation frameworks Binary re-writing: DynInst Process-level: PIN , Valgrind , DynamoRIO System-level: QEmu While we have different options and frameworks in implemening such meastures, design options and its trade-offs are not fully explored by the literatures. For this project, students will First, study and understand different instrumentation frameworks Implement security/program analysis using the framework E.g., Control Flow Graph generator Define a standard workload to run and measure overhead, and usability. Resources Pin project , Pin paper DynamoRio project , DynamoRio paper Valgrind project , Valgrind paper QEmu project , QEmu paper DynInst project , DynInst paper Automated IOC processing to produce actionable security rules Indicator of Compromise (IOC) indicates an artifact observed on a network or in an operating system that, with high confidence, indicates a computer intrusion. While IOC transforms the game security by cultivating the smooth exchange of security indicators. To further facilitates security information exchange by addressing the complexity and hectic nature of such security information that we have observed with the existing protocol (e.g., Yara rules ), a number of different standards are proposed and work on progress ( STIX , TAXI ). While these proposals attempt to address large portion of problem domain, still we have non-negligible rooms remain for improvements, for instance, many of important security IOCs are posted in a hard to parse not confirming to Internet standard. For instance, many security analysis are written in a plain English in a form of technical report, whitepaper, or blog postings. From this project, student will attempts to parse malformed security indicators into STIX or TAXI conpatiable formation, so as it can be properly translated into standard IOC format and further circulated. Page last revised on: 2019-08-30","title":"Projdraft"},{"location":"projdraft/#system-call-level-data-collection-for-behavioral-security-analysis","text":"","title":"System call level data collection for behavioral security analysis"},{"location":"projdraft/#motivation","text":"In implementing in-host (vs. out-host or network) security measures efficient and reliable source for data collection is an essential building block. While different design choices are available in terms of monitoring granularities, system call level monitoring seems to be reasonable compromise consideration in terms of performance overhead and monitoring accuracy (granularity). Many existing in-host monitoring solutions choose a subset of system calls to capture, monitor and report for security analysis. Can we implement a better data collection for system call tracing? Leveraging the existing system call collection mechanisms (say sysdig, or dtrace, linux audit), how much overhead that we expect? can we collect and This area is in large demand and can spun into a number of different research directions.","title":"Motivation"},{"location":"projdraft/#project-idea-1-system-call-level-data-collection-framework-for-windows","text":"A number of existing implementation exists for Linux systems (Linux Audit, OSX DTrace, Sysdig project), but not many implementation exists for Windows operating systems. The main purpose of the project will be implementing MS Windows version of system call level data collection framework. Students will study and investigate a cadidate data source ETW (Event Tracing for Windows) . Students with previous experience MS Windows system programming may find this project interesting.","title":"Project idea 1: System-call level data collection framework for Windows"},{"location":"projdraft/#project-idea-2-a-comparision-study-of-different-system-call-data-collection-frameworks","text":"We it is previously mentioned, we have different data collection sources (Linux Audit, Sysdig, DTrace \u2026) that can run on a same system (say Linux). Students can try to build a same data collection framework for leveraging different mechanisms to compare the efficency and capability. Project can start by Data collection implemented/configured to collection the same subset of system calls (e.g., read(), write(), exec(), fork(), send(), recve()) and run those against standardized workload (e.g., benchmark suites and workloads).","title":"Project idea 2: A comparision study of different system call data collection frameworks"},{"location":"projdraft/#project-idea-3-user-level-support-for-process-dns-query-association","text":"Besides system call entries which can be obtained by the above mentioned data sources, we have other interested system events with higher/more security implications worth collected and analyzed. DNS is one of those information, traditionally collected from outside the host, only to associated to the host level without having the finer association with regard to a process which process actually initiated the DNS query of our interestes. A previous of previous proposal exists leveraging kernel level association or system interfaces. These turn out to be too intrusive enforcing users to kernel modules or to be subject to unexpected changes of system implementation. The project will implement the process-DNS association much lighter fashion without loosing/sacrifing the accuracy, but associating and cor-relating network system call (i.e., send(), recv()) and PCAP data. With this project aim to bridge the gap between two different domains of network and system security.","title":"Project idea 3: User-level support for process-DNS query association"},{"location":"projdraft/#project-idea-4-tpm-leveraged-integrity-and-safety-assurance-for-edge-data-collection-agent","text":"In implementing host-based security solutions, the guarantee for integrity of data collection agent and trustworthiness of its report have always been a challenging problem. For instance, the security analyst from Security Operation Center (SoC) does not have many options to confirm reports from end-devices (e.g., computers, servers, IoT devices) are indeed genunie (uncompromised). In this project, we want to leverage the hardware encoded security to build a root of trust for end-host security monitoring agents and confirm the authenticity and integrity of its status and messages it is reporting. From the project, students will Investigate and study threat model for end-host security agent. Inverstigate the capability and limitation of generally used TPM devices. Design and propose different level of security design and their trade-offs. Build prototype for TPM leveraged data collection agent","title":"Project idea 4: TPM leveraged Integrity and Safety Assurance for Edge Data Collection Agent"},{"location":"projdraft/#binary-similarity-analysis-to-detect-supply-chain-attack","text":"Newly updated programs may contain security backdoor. Without source code in hand can we measure the difference and specify the changes made to the code? Students can compare binaries of different versions program analysis representation such Control-Flow Graph (CFG), Function call graph. Such feature may provide an important and useful primitive detecting and mitigating the latest threats such as supply-chain-attacks . Many different ways for such attacks to be implanted to a public and well-trusted sources. The software vendor may implant attack vectors to get capabilities beyond its users expectation pretending it to be as a mere functionality extension. Or the active attacker plays a hat of open source programer and contribute to a widely adopted projects pretending to be a simple functionality extensions.","title":"Binary Similarity Analysis to Detect Supply Chain Attack"},{"location":"projdraft/#project-steps","text":"Literature survey Impelement your own prototype example Choose a not-to-big but interesting open source project Build the source to produce a bianry. Extract program representation against the binary. Inject a threat vector(e.g., simple backdoor) Build the source to produce a bianry. Extract program representation against the binary. Compare two representations to confirm your approach. Apply your approach to real softwares You can test your approach with ....","title":"Project steps"},{"location":"projdraft/#references","text":"Towards Automatic Software Lineage Inference Usenix Security 2013","title":"References"},{"location":"projdraft/#edge-tpu-related-project","text":"Google and Nvidia deployed edge-based computing devices for accelerating machine learning workloads. Nvidia Jetson nano Google Edge TPU processing board The motivation behind the direction is to offload expensive tasks of data transfer to the cloud and processing to on-the-spot edge devices. While this open a new computational model and further facilitates new usage cases with the various applications based on accelerated ML support on-the-fly, at the same time it can also bring new security landscapes eitherproviding new ways of implementing security task or exposing new attack surface for the adversaries can aim to take over.","title":"Edge TPU related project"},{"location":"projdraft/#project-idea-1-security-application-using-edge-tpu","text":"With new device and its new capability, students can be wild and creative to propose a new security application. Note that image and video at the edge devices (similar size of Raspberry Pi board) will have much larger throughout and performed much faster.","title":"Project idea 1: Security application using Edge-TPU"},{"location":"projdraft/#project-idea-2-protecting-assets-from-edge-tpu","text":"With new edge device, important intellectual assets such as Prediction Model needs to be offloaded and transferred to each edge devices. For the portablity nature of Edge device, adversary can easily obtain devices phsycally or over the network. For the project, students can think of ways to prevent such assets from being taken over by the adversary. Students needs to consider both runtime and offline aspects. Note that CPU components of the devices by default Trustzone featuress.","title":"Project idea 2: Protecting assets from Edge-TPU"},{"location":"projdraft/#improvement-for-automated-large-scale-malware-analysis-study","text":"Recently, we observe millions of allegedly payloads are found and reported daily and this phenomenon pushes the task of manual investigation and analysis nearly infeasilble. Industry and academia together have proposed and worked on automated framework to scale process and analyze malware payloads by implemented automated security sandbox for security and malware analysis. Yet, such proposal has improved the status, we as a community yet to see many pitfalls and limitation in replaying malware and capture the essence of malicious behavior. From this project, students will perform the following tasks. First implement one of the most well-known opensource sandbox for malware analysis . Write behavioral signature by extending a Cuckoo community API to better judge whethter a given payload is indeed malicous thus require further investigation. Investigate different techniques (Anti-VM, Anti-Debug) that give malware writers employs to probes the sandbox execution to silencing any of malicious behaviors, thus can remain undetected/undiscovered by the analysis. For a given malware payload, extend the sandbox framework by implementing functionalities to spot anti-debugging techinques and find a way to go around it.","title":"Improvement for Automated Large-scale Malware Analysis Study"},{"location":"projdraft/#references_1","text":"Cuckoo Sandbox Cuckoo Community Spotless Sandboxes: Evading Malware Analysis Systems using Wear-and-Tear Artifacts","title":"References"},{"location":"projdraft/#implementation-of-advanced-persitent-threat-apt-framework-for-security-evaluation","text":"More research and industry together focuses on Advanced Persistent Threat (APT) designed and launched by nation-level threat actors. Different approaches to monitor, analyze, and mitigate such attacks are proposed. However, research and industry together lacks in framework level support for testing and confirm their effectiveness in protecting valuable assets against such attempts. In this project, students will First, perform a literature research APT attacks. Build a mini-lab environment that would emulate a real-world enterprise environment. Implement and document a number of APT cases","title":"Implementation of Advanced Persitent Threat (APT) framework for Security Evaluation"},{"location":"projdraft/#references_2","text":"APT Notes - Github project: new repo , old repo APT3 scenario by MITRE","title":"References"},{"location":"projdraft/#steganography-or-image-forensics-analysis-and-defense-for-malcious-payload-embedded-documentation","text":"Steganography has been an effective techinques for the hacker community in embedding different types of malcious payloads into seemingly benign document to evade security detection measures. This provides attacker easy way to propagated their malicious payloads yet remain undetected by any security measure. When you see any databases or public resources for malware collections, you realizes malware-embedded documents now take majority. Analyzing Malicious Documents Cheat Sheet https://www.youtube.com/watch?v=np0mPy-EHII Steganography: A Safe Haven for Malware https://books.google.com/books?hl=en&lr=&id=qMB9AiFUWF0C&oi=fnd&pg=PP1&ots=glBaUv19cd&sig=VrUI34kRvs67Lf7r7EMHNRbBtz0 \u2018Dresden Image Database\u2019 for benchmarking digital image forensics","title":"Steganography or image forensics -- Analysis and defense for malcious payload embedded documentation"},{"location":"projdraft/#comparsion-of-process-level-instrumentation-approachs-virtualization","text":"As our course proceeds, we will learn a number of different choices in instrumenting software program to introspect process and system internals at runtime. The one can leverage such frameworks to monitor, analyze, and mitigate process and system activities. Instrumentation frameworks Binary re-writing: DynInst Process-level: PIN , Valgrind , DynamoRIO System-level: QEmu While we have different options and frameworks in implemening such meastures, design options and its trade-offs are not fully explored by the literatures. For this project, students will First, study and understand different instrumentation frameworks Implement security/program analysis using the framework E.g., Control Flow Graph generator Define a standard workload to run and measure overhead, and usability.","title":"Comparsion of process-level instrumentation approachs virtualization"},{"location":"projdraft/#resources","text":"Pin project , Pin paper DynamoRio project , DynamoRio paper Valgrind project , Valgrind paper QEmu project , QEmu paper DynInst project , DynInst paper","title":"Resources"},{"location":"projdraft/#automated-ioc-processing-to-produce-actionable-security-rules","text":"Indicator of Compromise (IOC) indicates an artifact observed on a network or in an operating system that, with high confidence, indicates a computer intrusion. While IOC transforms the game security by cultivating the smooth exchange of security indicators. To further facilitates security information exchange by addressing the complexity and hectic nature of such security information that we have observed with the existing protocol (e.g., Yara rules ), a number of different standards are proposed and work on progress ( STIX , TAXI ). While these proposals attempt to address large portion of problem domain, still we have non-negligible rooms remain for improvements, for instance, many of important security IOCs are posted in a hard to parse not confirming to Internet standard. For instance, many security analysis are written in a plain English in a form of technical report, whitepaper, or blog postings. From this project, student will attempts to parse malformed security indicators into STIX or TAXI conpatiable formation, so as it can be properly translated into standard IOC format and further circulated. Page last revised on: 2019-08-30","title":"Automated IOC processing to produce actionable security rules"},{"location":"projects/","text":"Project ideas General guideline In this page, I list a few exemplary project ideas to help you. Please note that this is to give you a guideline regarding my expectation for the course project. I wish the list can help you developing the right senses for the proper problem definition, size of the project, and techniques to be used. The list generally reflects my research interest and expertise, and I believe you can think hard to find security problems that would interest you the most. My preference is to see your project is about a problem defined and proposed by you. It is always better to have a course project in which you find yourself interested. It is okay for you to pick one of the following project ideas. Taking it as one starting point, you can either work all the way or diverge to pursue your direction as the project proceeds. The course is about system security and I expect the course project and related techniques remain around the vicinity of system security topics and techniques. However, if you are compelled to have a problem less relevant to system security, please feel free to find me and discuss. The bottom line is that it still has to be a security problem. Please find your team members as early as you can and have as much discussion as possible. If you need any help or want to consult with me, you can always find me during my office hours or send an email to set up an appointment. Expected outcomes The followings project outcomes that I expect to see at the end of semester. Project documentation (small/medium version research paper) Project source code with documentations (comments, API \u2026) Project Demo For the course project, I will strongly encourage students to aim high to produce an outcome with larger impact. With an interesting problem, and solid result, a student or a team of students can shoot for undergraduate or master thesis or a publication from a academic conference.","title":"Projects"},{"location":"projects/#project-ideas","text":"","title":"Project ideas"},{"location":"projects/#general-guideline","text":"In this page, I list a few exemplary project ideas to help you. Please note that this is to give you a guideline regarding my expectation for the course project. I wish the list can help you developing the right senses for the proper problem definition, size of the project, and techniques to be used. The list generally reflects my research interest and expertise, and I believe you can think hard to find security problems that would interest you the most. My preference is to see your project is about a problem defined and proposed by you. It is always better to have a course project in which you find yourself interested. It is okay for you to pick one of the following project ideas. Taking it as one starting point, you can either work all the way or diverge to pursue your direction as the project proceeds. The course is about system security and I expect the course project and related techniques remain around the vicinity of system security topics and techniques. However, if you are compelled to have a problem less relevant to system security, please feel free to find me and discuss. The bottom line is that it still has to be a security problem. Please find your team members as early as you can and have as much discussion as possible. If you need any help or want to consult with me, you can always find me during my office hours or send an email to set up an appointment.","title":"General guideline"},{"location":"projects/#expected-outcomes","text":"The followings project outcomes that I expect to see at the end of semester. Project documentation (small/medium version research paper) Project source code with documentations (comments, API \u2026) Project Demo For the course project, I will strongly encourage students to aim high to produce an outcome with larger impact. With an interesting problem, and solid result, a student or a team of students can shoot for undergraduate or master thesis or a publication from a academic conference.","title":"Expected outcomes"},{"location":"quizzes/","text":"Quizzes Quiz 1 Quiz 2 Page last revised on: 2019-08-27","title":"quizzes"},{"location":"quizzes/#quizzes","text":"Quiz 1 Quiz 2 Page last revised on: 2019-08-27","title":"Quizzes"},{"location":"schedule/","text":"Schedule Please note that the course schedule is now tenatitive . It is under subject of change upon the instructor\u2019s decision. .tg {border-collapse:collapse;border-spacing:0;} .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:top} Week Number Topics Resources Papers Schedule & Assignments Week 1 (Aug 23, 2019) Course overview and logistics ; Basics of computer system operation TPM online tutorial , Rethinking PID 1 N/A N/A Week 2 (Aug 30, 2019) Binary and Process - Basic Concepts X86 assembly, The ELF file format Linux x86 Program Start Up, Program in Memory, Load-time reloc. of shared libraries How to read / present academic papers readelf , objdump , nm, GDB , gdbinit N/A Week 3 (Sep 6, 2019) Memory Corruption Attacks & Defenses Buffer overflow, Stack buffer overflow x86 NX support, Stack canaries, ASLR IDA pro, Ghidra, Radare2 [TBD] Quiz: Reverse engineering binaries Week 4 (Sep 13, 2019) Modern Binary Exploits [TBD] Quiz: Create your own CTF problems Week 5 (Sep 20, 2019) Virtualization Basics [TBD] Week 6 (Sep 27, 2019) VMM Introspection 1 [TBD] Assignment1 Week 7 (Sep 28, 2019) VMM Introspection 2 [TBD] Week 8 (Oct 4, 2019) Static Analysis 1 [TBD] Assignment1 due Week 9 (Oct 11, 2019) Static Analysis 2 [TBD] Week 10 (Oct 18, 2019) Static Analysis 3 [TBD] Assignment2 Week 11 (Oct 25, 2019) Fuzzing and Symbolic Execution [TBD] Week 12 (Nov 1, 2019) Attacker techniques [TBD] Week 13 (Nov 8, 2019) Latest security topics 1 [TBD] Assignment 2 due Week 14 (Nov 15, 2019) Latest security topics 2 [TBD] Week 15 (Nov 22, 2019) Project Presentation 1 Week 16 (Nov 29, 2019) No class (Thanksgiving break) Week 17 (Dec 6, 2019) Project Presentation 2 Page last revised on: 2019-08-27","title":"Schedule"},{"location":"schedule/#schedule","text":"Please note that the course schedule is now tenatitive . It is under subject of change upon the instructor\u2019s decision. .tg {border-collapse:collapse;border-spacing:0;} .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:top} Week Number Topics Resources Papers Schedule & Assignments Week 1 (Aug 23, 2019) Course overview and logistics ; Basics of computer system operation TPM online tutorial , Rethinking PID 1 N/A N/A Week 2 (Aug 30, 2019) Binary and Process - Basic Concepts X86 assembly, The ELF file format Linux x86 Program Start Up, Program in Memory, Load-time reloc. of shared libraries How to read / present academic papers readelf , objdump , nm, GDB , gdbinit N/A Week 3 (Sep 6, 2019) Memory Corruption Attacks & Defenses Buffer overflow, Stack buffer overflow x86 NX support, Stack canaries, ASLR IDA pro, Ghidra, Radare2 [TBD] Quiz: Reverse engineering binaries Week 4 (Sep 13, 2019) Modern Binary Exploits [TBD] Quiz: Create your own CTF problems Week 5 (Sep 20, 2019) Virtualization Basics [TBD] Week 6 (Sep 27, 2019) VMM Introspection 1 [TBD] Assignment1 Week 7 (Sep 28, 2019) VMM Introspection 2 [TBD] Week 8 (Oct 4, 2019) Static Analysis 1 [TBD] Assignment1 due Week 9 (Oct 11, 2019) Static Analysis 2 [TBD] Week 10 (Oct 18, 2019) Static Analysis 3 [TBD] Assignment2 Week 11 (Oct 25, 2019) Fuzzing and Symbolic Execution [TBD] Week 12 (Nov 1, 2019) Attacker techniques [TBD] Week 13 (Nov 8, 2019) Latest security topics 1 [TBD] Assignment 2 due Week 14 (Nov 15, 2019) Latest security topics 2 [TBD] Week 15 (Nov 22, 2019) Project Presentation 1 Week 16 (Nov 29, 2019) No class (Thanksgiving break) Week 17 (Dec 6, 2019) Project Presentation 2 Page last revised on: 2019-08-27","title":"Schedule"}]}